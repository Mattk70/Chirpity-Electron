/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

// This file is autogenerated.


import {registerKernel} from '@tensorflow/tfjs-core/dist/base';
import '@tensorflow/tfjs-core/dist/base_side_effects';
export * from '@tensorflow/tfjs-core/dist/base';

   <script>
      tf.registerKernel({
        kernelName: 'FFT2',
        backendName: 'webgl',
        kernelFunc: ({ backend, inputs: { input: x } }) => {
          const innerDimensionSize = x.shape[x.shape.length - 1]
          const batch = tf.util.sizeFromShape(x.shape) / innerDimensionSize
          const realPart = backend.runWebGLProgram({
            variableNames: ['real'],
            outputShape: [batch, innerDimensionSize],
            userCode: `
              void main() {
                ivec2 coords = getOutputCoords();
                int batch = coords[0];
                float exponentMultiplierTimesIndexRatio = -2.0 * ${Math.PI} * float(coords[1]) / float(${innerDimensionSize});
                float result = 0.0;
                for (int i = 0; i < ${innerDimensionSize}; i++) {
                  float x = exponentMultiplierTimesIndexRatio * float(i);
                  result += getReal(batch, i) * cos(x);
                }
                setOutput(result);
              }`
          }, [{ dataId: x.dataId, dtype: x.dtype, shape: [batch, innerDimensionSize]}], 'float32')
          const res = tf.engine().runKernel('Reshape', { x: realPart }, { shape: x.shape })
          backend.disposeIntermediateTensorInfo(realPart)
          return res
        }
      })
      function stft(signal, frameLength, frameStep, fftLength, windowFn) {
        const framedSignal = tf.signal.frame(signal, frameLength, frameStep)
        const input = tf.mul(framedSignal, windowFn(frameLength))
        let innerDimensionSize = input.shape[input.shape.length - 1]
        const batch = input.size / innerDimensionSize
        const realValues = tf.engine().runKernel('FFT2', {input: tf.reshape(input, [batch, innerDimensionSize])})
        const half = Math.floor(innerDimensionSize / 2) + 1
        const realComplexConjugate = tf.split(
            realValues, [half, innerDimensionSize - half],
            realValues.shape.length - 1)
        const outputShape = input.shape.slice()
        outputShape[input.shape.length - 1] = half
        return tf.reshape(realComplexConjugate[0], outputShape)
      }
      class MelSpecLayerSimple extends tf.layers.Layer {
          constructor(config) {
              super(config)
              this.sampleRate = config.sampleRate
              this.specShape = config.specShape
              this.frameStep = config.frameStep
              this.frameLength = config.frameLength
              this.melFilterbank = tf.tensor2d(config.melFilterbank)
          }
          build(inputShape) {
              this.magScale = this.addWeight(
                  'magnitude_scaling',
                  [],
                  'float32',
                  tf.initializers.constant({ value: 1.23 })
              );
              super.build(inputShape)
          }
          computeOutputShape(inputShape) {
              return [inputShape[0], this.specShape[0], this.specShape[1], 1];
          }
          call(inputs) {
            return tf.tidy(() => {
                  inputs = inputs[0];
                  const inputList = tf.split(inputs, inputs.shape[0])
                  const specBatch = inputList.map(input =>{
                      input = input.squeeze();
                      input = tf.sub(input, tf.min(input, -1, true));
                      input = tf.div(input, tf.max(input, -1, true).add(0.000001));
                      input = tf.sub(input, 0.5);
                      input = tf.mul(input, 2.0);

                      let spec;
                      if (window.useFastFFT) {
                        spec = stft(
                          input,
                          this.frameLength,
                          this.frameStep,
                          this.frameLength,
                          tf.signal.hannWindow,
                        )
                      } else {
                        spec = tf.signal.stft(
                            input,
                            this.frameLength,
                            this.frameStep,
                            this.frameLength,
                            tf.signal.hannWindow,
                        )
                        spec = tf.cast(spec, 'float32')
                      }
                      spec = tf.matMul(spec, this.melFilterbank)
                      spec = spec.pow(2.0)
                      spec = spec.pow(tf.div(1.0, tf.add(1.0, tf.exp(this.magScale.read()))))
                      spec = tf.reverse(spec, -1)
                      spec = tf.transpose(spec)
                      spec = spec.expandDims(-1)
                      return spec;
                  })
                  return tf.stack(specBatch)
              });
          }
          static get className() { return 'MelSpecLayerSimple' }
      }
      tf.serialization.registerClass(MelSpecLayerSimple);
function arrayProduct (arr) {
    let product = 1;
    for (let i = 0; i < arr.length; i++) { product *= arr[i] }
    return product;
}
function flatDispatchLayout(shape) { return {x: shape.map((d, i) => i)} }
function computeDispatch(layout, outputShape, workgroupSize = [1, 1, 1], elementsPerThread = [1, 1, 1]) {
return [Math.ceil(arrayProduct(layout.x.map(d => outputShape[d])) /(workgroupSize[0] * elementsPerThread[0])),
    layout.y ? Math.ceil(arrayProduct(layout.y.map(d => outputShape[d])) / (workgroupSize[1] * elementsPerThread[1])) : 1,
    layout.z ? Math.ceil(arrayProduct(layout.z.map(d => outputShape[d])) / (workgroupSize[2] * elementsPerThread[2])) : 1]
}

if (!globalThis.tf) { globalThis.tf = {} }
tf.registerKernel?.({
    kernelName: 'FFT2',
    backendName: 'webgpu',
    kernelFunc: ({ backend, inputs: { input } }) => {
        const innerDim = input.shape[input.shape.length - 1] / 2
        const batch = tf.util.sizeFromShape(input.shape) / innerDim / 2
        const workgroupSize = [64, 1, 1]
        const dispatchLayout = flatDispatchLayout([batch, innerDim * 2])
        const dispatch = computeDispatch(dispatchLayout, [batch, innerDim * 2], workgroupSize, [2, 1, 1])
        let currentTensor = backend.runWebGPUProgram({
            variableNames: ['X'],
            outputShape: [batch, innerDim * 2],
            workgroupSize,
            shaderKey: `fft_permut_${innerDim}`,
            dispatchLayout,
            dispatch,
            getUserCode: () => `
fn main(index: i32) {
let batch = index / ${innerDim};
let p = index % ${innerDim};
let outIndexReal = batch * ${innerDim * 2} + p;
let outIndexImag = outIndexReal + ${innerDim};
var k = 0;
for (var i: u32 = 0; i < ${Math.log2(innerDim)}; i = i + 1) {
    if ((p & (1 << i)) != 0) { k |= (1 << (${Math.log2(innerDim) - 1} - i)); }
}
setOutputAtIndex(outIndexReal, getX(batch, 2 * k));
setOutputAtIndex(outIndexImag, getX(batch, 2 * (k % ${innerDim}) + 1));
}`
        }, [input], 'float32')
        for (let len = 1; len < innerDim; len *= 2) {
            let prevTensor = currentTensor
            currentTensor = backend.runWebGPUProgram({
                variableNames: [`value`],
                outputShape: [batch, innerDim * 2],
                workgroupSize,
                shaderKey: `fft_step_${innerDim}_${len}`,
                dispatchLayout,
                dispatch,
                getUserCode: () => `fn main(index: i32) {
                    let batch = index / ${innerDim};
                    let i = index % ${innerDim};
                    let outIndexReal = batch * ${innerDim * 2} + i;
                    let outIndexImag = outIndexReal + ${innerDim};
                    let k = i % ${innerDim};
                    let isHigh = (k % (${len} * 2)) / ${len};
                    let highSign = (1 - isHigh * 2);
                    let baseIndex = k - isHigh * ${len};
                    let t = ${Math.PI} / f32(${len}) * f32(k % ${len});
                    let a = cos(t);
                    let b = sin(-t);
                    let oddK_re = getValue(batch, baseIndex + ${len});
                    let oddK_im = getValue(batch, baseIndex + ${len} + ${innerDim});

                    let evenK_re = getValue(batch, baseIndex);
                    let outpR = (evenK_re + (oddK_re * a - oddK_im * b) * f32(highSign));
                    setOutputAtIndex(outIndexReal, outpR);
                    let evenK_im = getValue(batch, baseIndex + ${innerDim});
                    let outpI = (evenK_im + (oddK_re * b + oddK_im * a) * f32(highSign));
                    setOutputAtIndex(outIndexImag, outpI);
                    }`
                }, [currentTensor], 'float32')
            backend.disposeData(prevTensor.dataId)
        }
        let prevTensor = currentTensor
        currentTensor = backend.runWebGPUProgram({
            variableNames: ['x'],
            outputShape: [batch, innerDim * 2],
            workgroupSize,
            shaderKey: `fft_post_${innerDim}`,
            dispatchLayout,
            dispatch: computeDispatch(flatDispatchLayout([batch, innerDim * 2]), [batch, innerDim * 2], workgroupSize, [1, 1, 1]),
            getUserCode: () => `
fn main(index: i32) {
    let coords = getOutputCoords();
    let i = coords[1];
    let batch = coords[0];
    var k = i;
    if (i > ${innerDim}) {
      k = ${innerDim * 2} - i;
    }
    let zI = k % ${innerDim};
    let conjI = (${innerDim} - k) % ${innerDim};
    let Zk0 = getX(batch, zI);
    let Zk_conj0 = getX(batch, conjI);
    let t = ${-2 * Math.PI} * f32(k) / f32(${innerDim * 2});
    let result = (Zk0 + Zk_conj0 + cos(t) * (getX(batch, zI+${innerDim}) + getX(batch, conjI+${innerDim})) + sin(t) * (Zk0 - Zk_conj0)) * 0.5;
    setOutputAtIndex(index, result);
}`
        }, [currentTensor], 'float32')
        backend.disposeData(prevTensor.dataId)
        return currentTensor
    }
})